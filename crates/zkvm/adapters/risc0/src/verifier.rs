use express_zkvm::{Proof, VerificationKey, ZKVMVerifier};
use risc0_zkvm::{serde::to_vec, sha::Digest, Receipt};

/// A verifier for the `RiscZero` zkVM, responsible for verifying proofs generated by the host
pub struct Risc0Verifier;

impl ZKVMVerifier for Risc0Verifier {
    fn verify(verification_key: &VerificationKey, proof: &Proof) -> anyhow::Result<()> {
        let receipt: Receipt = bincode::deserialize(proof.as_bytes())?;
        let vk: Digest = bincode::deserialize(&verification_key.0)?;
        receipt.verify(vk)?;
        Ok(())
    }

    fn verify_with_public_params<T: serde::Serialize + serde::de::DeserializeOwned>(
        verification_key: &VerificationKey,
        public_params: T,
        proof: &Proof,
    ) -> anyhow::Result<()> {
        let receipt: Receipt = bincode::deserialize(proof.as_bytes())?;
        let vk: Digest = bincode::deserialize(&verification_key.0)?;
        receipt.verify(vk)?;

        let actual_public_parameter: T = receipt.journal.decode()?;

        // TODO: use custom ZKVM error
        anyhow::ensure!(
            to_vec(&actual_public_parameter)? == to_vec(&public_params)?,
            "Failed to verify proof given the public param"
        );

        Ok(())
    }

    fn verify_groth16(
        _proof: &[u8],
        _verification_key: &[u8],
        _public_params_raw: &[u8],
    ) -> anyhow::Result<()> {
        todo!()
    }

    fn extract_public_output<T: serde::Serialize + serde::de::DeserializeOwned>(
        proof: &Proof,
    ) -> anyhow::Result<T> {
        let receipt: Receipt = bincode::deserialize(proof.as_bytes())?;
        Ok(receipt.journal.decode()?)
    }
}
